#### Law:
```hs
map f . filter p = map fst . filter snd . map (fork (f, p))
```



fork (f . h, g . k) = cross (f, g) . fork (h, k)
  where cross (f, g) (x, y) (f x, g y)

The next two laws relate fork to zip and unzip:
unzip = fork (map fst, map snd)
uncurry zip . fork (map f, map g) = map (fork (f, g))

This law relates fork to filter:
map (fork (f, g)) . filter (p . g) = filter (p . snd) . map (fork (f, g))
Evaluating the expression on the right is more efficient than evaluating the
expression on the left, because g is evaluated just once for each element of the
argument list.

#### Filter
filter p . filter q = filter (p &.& q)
  where f &.& g = \x -> f x && g x
requires p and q to be strict.

filter p . map f = map f . filter (p . f)
filter p . concat = concat . map (filter p)

length . map f = length

#### Properties of \\
(as ++ bs) \\ cs = (as \\ cs) ++ (bs \\ cs)
as \\ (bs ++ cs) = (as \\ bs) \\ cs
(as \\ bs) \\ cs = (as \\ cs) \\ bs

These properties reflect similar laws about sets in which set union U replaces
++ and set difference \ replaces \\.

Suppose as and vs are disjoint, i.e. (as \\ vs) = as, and that bs and us are
also disjoint, that is (bs \\ us) = bs. It follows from the previous properties
that:
(as ++ bs) \\ (us ++ vs) = (as \\ us) ++ (bs \\ vs)
